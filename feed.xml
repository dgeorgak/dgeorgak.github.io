

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://dgeorgak.github.io/</id>
  <title>Dim online</title>
  <subtitle>Dim online</subtitle>
  <updated>2025-02-05T17:10:36+00:00</updated>
  <author>
    <name>Dim</name>
    <uri>https://dgeorgak.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://dgeorgak.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://dgeorgak.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2025 Dim </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>find cheatsheet</title>
    <link href="https://dgeorgak.github.io/posts/find-cheatsheet/" rel="alternate" type="text/html" title="find cheatsheet" />
    <published>2025-02-05T00:00:00+00:00</published>
  
    <updated>2025-02-05T00:00:00+00:00</updated>
  
    <id>https://dgeorgak.github.io/posts/find-cheatsheet/</id>
    <content src="https://dgeorgak.github.io/posts/find-cheatsheet/" />
    <author>
      <name>Dim</name>
    </author>

  
    
    <category term="Tools" />
    
    <category term="find" />
    
  

  <summary>“find”.
An ever present, and very essential tool in the cli.
With find one can… well… find files and directories in the system they are in.
Sometimes the command seems a bit intimidating in its use though.  So rather than learning its ins and outs by heart, why not make a cheatsheet for it?

So here are
5 basic and useful find commands
for your everyday basic cli needs.
1. Find a file by name:
...</summary>

  </entry>

  
  <entry>
    <title>One more way to copy large files to and from lhost</title>
    <link href="https://dgeorgak.github.io/posts/one-more-way-to-copy-large-files-to-and-from-lhost/" rel="alternate" type="text/html" title="One more way to copy large files to and from lhost" />
    <published>2025-01-12T00:00:00+00:00</published>
  
    <updated>2025-01-12T00:00:00+00:00</updated>
  
    <id>https://dgeorgak.github.io/posts/one-more-way-to-copy-large-files-to-and-from-lhost/</id>
    <content src="https://dgeorgak.github.io/posts/one-more-way-to-copy-large-files-to-and-from-lhost/" />
    <author>
      <name>Dim</name>
    </author>

  
    
    <category term="Tips" />
    
    <category term="CTF" />
    
  

  <summary>Lets say that you found a large .bak file in the rhost and you want to copy it to your lhost for investigation purposes.
Or you need to copy a script to the rhost and fire it up for your exploit to take effect.
And in both of these cases there are no tools present that might prove useful to do such a thing.
The solution provided in this post will work both directions, and it works by encoding s...</summary>

  </entry>

  
  <entry>
    <title>A quick and easy web server</title>
    <link href="https://dgeorgak.github.io/posts/a-quick-and-easy-web-server/" rel="alternate" type="text/html" title="A quick and easy web server" />
    <published>2025-01-11T00:00:00+00:00</published>
  
    <updated>2025-01-11T00:00:00+00:00</updated>
  
    <id>https://dgeorgak.github.io/posts/a-quick-and-easy-web-server/</id>
    <content src="https://dgeorgak.github.io/posts/a-quick-and-easy-web-server/" />
    <author>
      <name>Dim</name>
    </author>

  
    
    <category term="Tools" />
    
    <category term="webserver" />
    
  

  <summary>There are many reasons why a pentester would want to quickly fire up a web server.
Imagine having gained access to a machine, and now you need to upload a payload or a script.  You could try messing around with file transfer protocols.  But it would be much easier to just use a one-liner and spin up a quick HTTP server.
The reverse scenario is also true.  Sometimes, you’ve got to exfiltrate fil...</summary>

  </entry>

  
  <entry>
    <title>CTF vs Pentest engagement</title>
    <link href="https://dgeorgak.github.io/posts/CTF-vs-Pentest-engagement/" rel="alternate" type="text/html" title="CTF vs Pentest engagement" />
    <published>2024-09-18T00:00:00+00:00</published>
  
    <updated>2024-09-18T00:00:00+00:00</updated>
  
    <id>https://dgeorgak.github.io/posts/CTF-vs-Pentest-engagement/</id>
    <content src="https://dgeorgak.github.io/posts/CTF-vs-Pentest-engagement/" />
    <author>
      <name>Dim</name>
    </author>

  
    
    <category term="Thinking out loud" />
    
  

  <summary>One of the common misconceptions for new people joining the pentesting community is that a CTF emulates a real pentest engagement.  And it makes sense, because a CTF is among the first things that an aspiring penetration tester tackles that gives them a sample of the experience that is a pentest.  This is what they know.  This is also what I used to know, before I got a real glimpse of the actu...</summary>

  </entry>

  
  <entry>
    <title>feroxbuster</title>
    <link href="https://dgeorgak.github.io/posts/feroxbuster/" rel="alternate" type="text/html" title="feroxbuster" />
    <published>2024-05-29T00:00:00+00:00</published>
  
    <updated>2024-05-29T00:00:00+00:00</updated>
  
    <id>https://dgeorgak.github.io/posts/feroxbuster/</id>
    <content src="https://dgeorgak.github.io/posts/feroxbuster/" />
    <author>
      <name>Dim</name>
    </author>

  
    
    <category term="Tools" />
    
    <category term="feroxbuster" />
    
  

  <summary>Imagine the following target: https://www.myexampletarget.com.  Now imagine that somewhere in there is an admin page that presents a login screen that is susceptible to SQLi, and as a bonus it showcases the version of the webapp behind it.  The login page’s url is https://www.myexampletarget.com/dev/pages/member.admin.

But there is one caveat.  You do not know about it.  You do not know the ur...</summary>

  </entry>

</feed>


